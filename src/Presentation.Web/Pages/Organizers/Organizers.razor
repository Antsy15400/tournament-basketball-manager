@page "/organizers"
@using Domain.Organizers;
@inject IOrganizerClient organizerClient
@inject NavigationManager navigationManager
@inject OrganizerState organizerState

<MudText Typo="Typo.h3">Organizers</MudText>
<MudStack>
    <MudRadioGroup @bind-SelectedOption="CurrentFeature">
        <MudRadio Option="@PageFeatures.List" Color="Color.Dark" UnCheckedColor="Color.Default">
            List organizers
        </MudRadio>
        <MudRadio Option="@PageFeatures.Creation" Color="Color.Dark" UnCheckedColor="Color.Default">
            Create organizer
        </MudRadio>
    </MudRadioGroup>
    @switch (CurrentFeature)
    {
        case PageFeatures.Creation:
            <CreateOrganizerComponent OnSubmit="OnCreateOrganizerSubmit" />
            break;
        case PageFeatures.List:
            <OrganizerListComponent Organizers="organizerState.Organizers" />
            break;
        default:
            <p>Select a feature</p>
            break;
    }
</MudStack>

@code {
    PageFeatures CurrentFeature = PageFeatures.List;

    protected override async Task OnInitializedAsync()
    {
        organizerState.InitializeOrganizers(await organizerClient.GetAllAsync());
    }

    async Task OnCreateOrganizerSubmit(EditContext context)
    {
        try
        {
            var organizerCreatedId = await organizerClient.CreateAsync(context.Model);
            organizerState.AddOrganizer(context.Model, organizerCreatedId);
            CurrentFeature = PageFeatures.List;
        }
        catch (ApiException)
        {
        }
    }

    enum PageFeatures
    {
        Creation,
        List
    }
}